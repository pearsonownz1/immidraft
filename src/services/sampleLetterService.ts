/**
 * Service for managing sample letters for different visa types
 * Used to inject real-world examples into LLM prompts
 */

// Define the SampleLetter interface
export interface SampleLetter {
  visaType: string;
  fileName: string;
  title: string;
  content: string;
  tags: string[];
  fileSize: number;
  lastModified: string;
}

// Import the sample letters JSON (will be generated by the convert-samples.js script)
// If the file doesn't exist yet, we'll use an empty array
let sampleLetters: SampleLetter[] = [];

// Import sample letters
const loadSampleLetters = async () => {
  try {
    const module = await import('../data/sampleLetters.json');
    // Handle both default export and direct export
    sampleLetters = Array.isArray(module.default) ? module.default : 
                   (Array.isArray(module) ? module : []);
    console.log(`Loaded ${sampleLetters.length} sample letters`);
  } catch (error) {
    console.warn('Failed to load sample letters:', error);
    sampleLetters = [];
  }
};

// Load sample letters immediately
loadSampleLetters();

export const sampleLetterService = {
  /**
   * Get all sample letters
   * @returns Array of all sample letters
   */
  getAllSamples(): SampleLetter[] {
    return sampleLetters;
  },

  /**
   * Get sample letters for a specific visa type
   * @param visaType The visa type to filter by (e.g., "EB1", "O1")
   * @returns Array of matching sample letters
   */
  getSamplesByVisaType(visaType: string): SampleLetter[] {
    if (!visaType) return [];
    
    // Normalize the visa type for comparison (remove hyphens, spaces, etc.)
    const normalizedVisaType = this.normalizeVisaType(visaType);
    
    return sampleLetters.filter(sample => 
      this.normalizeVisaType(sample.visaType) === normalizedVisaType
    );
  },

  /**
   * Get the best sample letter for a specific visa type
   * @param visaType The visa type to filter by
   * @param tags Optional tags to prioritize
   * @returns The best matching sample letter or null if none found
   */
  getBestSampleForVisaType(visaType: string, tags: string[] = []): SampleLetter | null {
    const samples = this.getSamplesByVisaType(visaType);
    
    if (samples.length === 0) {
      return null;
    }
    
    if (samples.length === 1) {
      return samples[0];
    }
    
    // If we have tags, try to find the best match
    if (tags.length > 0) {
      // Score each sample by how many tags match
      const scoredSamples = samples.map(sample => {
        const matchingTags = sample.tags.filter(tag => 
          tags.some(t => tag.toLowerCase().includes(t.toLowerCase()))
        );
        return {
          sample,
          score: matchingTags.length
        };
      });
      
      // Sort by score (highest first)
      scoredSamples.sort((a, b) => b.score - a.score);
      
      // Return the highest scoring sample
      return scoredSamples[0].sample;
    }
    
    // If no tags or no matches, return the first sample
    return samples[0];
  },

  /**
   * Normalize a visa type string for consistent comparison
   * @param visaType The visa type to normalize
   * @returns Normalized visa type string
   */
  normalizeVisaType(visaType: string): string {
    if (!visaType) return '';
    
    // Remove spaces, hyphens, and convert to uppercase
    let normalized = visaType.replace(/[\s-]/g, '').toUpperCase();
    
    // Handle special cases
    if (normalized === 'EB1A' || normalized === 'EB1B' || normalized === 'EB1C') {
      normalized = 'EB1';
    } else if (normalized === 'EB2NIW') {
      normalized = 'EB2';
    } else if (normalized.startsWith('O1')) {
      normalized = 'O1';
    } else if (normalized.startsWith('L1')) {
      normalized = 'L1';
    }
    
    return normalized;
  }
};
